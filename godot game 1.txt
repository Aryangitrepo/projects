//making a game in  godot using youtube tutorial 
step1:
download the required asset pack and extract all the data in the pack
after extracting all the data in the pack make a project in the godot application
then in the filesystem window make sure to make two new folders assets and scripts
then drag and drop the assets folder from file location into the assets folder inside godot
To make anything in godot we do it using nodes 
nodes come in different type like image,audio and sprites 

instead of repeatingly making nodes we make nodes for the different required objects 
these scenes can be used repeatedly to make a connected game
using one scene inside another scene is known as nesting

The node and leaf nodes are known as scene tree

step2:making the player 
select 2D scene option from scene menu and then rename that node to game or desired name 
to create a character first create a new scene
then in there select a new node called characterbody2d(ctrl+a)[used for 2d characters that collide with the environment]
then inside it make another leaf node known as animatedsprite2d
we can use inspector node to change properties of any given node 
 
Adding a asset
using inspect window select the animatedsprite2d node and click animation
there select new sprite frame option then click on import sprite from assets
there select the required sprite image then increase the horizontal and vertical pixel sizes 
after each sprite has a individual grid for itself then youll select the required sprites one by one in the required order 
then you can run the animation and make sure the fps is what you wanted 

step3:
making it physics interactive and giving collision detection capabilities 
select a new node known as collidershape2d and select the collider shape
then make it a bit smaller than the character sprite 

Then add a camera2d node so that we can get a camera view of the display scene 

step3:Character body movement and collider 
For adding movement options to the character object you need script now we will use the 
default godot movement function script and then edit it as required 

extends CharacterBody2D


const SPEED = 300.0
const JUMP_VELOCITY = -400.0


func _physics_process(delta: float) -> void:
	# Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta

	# Handle jump.
	if Input.is_action_just_pressed("ui_accept") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction := Input.get_axis("ui_left", "ui_right")
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()
//still the character wud fall of the screen so well have to add a collider
//we will add a world boundary plane to make sure the character does not fall of the plane 
make a new node staticbody2d inside it make another node known as collisionshap2d and select new worldboundary 
as the new shape 
the world boundary is considered static because it does not move 
it extends infinitely on the preferred axises as the designer desires 

step 4:World building 
well build the world now by removing the new world boundary we used for testing 
Well select a node known as tile map all the assets required for a tile map is stored in a asset collection known as tile sets
we can create multiple different type of levels using a tile map 
after that you have to drag the world asset pack to the tilemap
you can use the select buttton to select the required multi pixel assets 
then click the paint or write option to start designing the world on the tile map 

you can also use the select mode to move large chunks  simultaneously on the designer side too 
To add collider physics in inspector window click on the tilemap and select physics layer 
then click add layer to create a new physics layer 
Then in the tileset window select physics layer 0 and select the blocks only which need to be  interacted with 
you can change the collider range using the tileset paint window itself
to make sure the camera folows the player drag the camera2d to the player node 
in character body you can change z-index which defines the visibility layers,means which object should come infront of which other object 
you can enable position smoothening to make the camera movement smooth 

step5:Adding dynamic and design elements
adding platforms some that move and some that dont 
To obtain a certain region of a asset enable region and go to edit and crop out the part you want specifically from the selected asset image 
To make a platform make the collisionshape2d of the type you want and bring it over the platform asset 
now you get a one way platform means the player cannot jump onto it from the others side 
to make it both ways switch on one way collision in the platform 
making a moving platform :
We need to make use of animations for this purpose 
To animate select the node animationplayer then create a keyframe for the platform you want to move 
Then click on animation and add new animation 
then make a keyframe from transform->key move the platform at a different timestamp again add a keyframe you will obtain a animated platform 
To make sure the animated piecs are there in the output just remember to CLICK THE GODDAMN AUTOPLAY OPTION IN THE ANIMATION WINDOWS


step6:Pickups
to add pickable coins into the game create a new scene 
then create a AREA2D[this is used to make collision occur in a limited area and not a big area ]
to add animations add another node known as animated sprite2d and add the assets you want from the asset list 
then drag and drop the coins
//to make the pickables functional create a new script
we use signals to detect when a player approaches the physics body of the area
we need to make sure the character body interacts with pickables only and not the other objects 
so we change the layer of the character to layer2
then we change the mask of the pickables to 2 [which layer pickable interacts with]

extends Area2D

func _on_body_entered(body):
	print("+1 coin!")
	queue_free() [used to make the coin object means once its been collected by the players it should dissapear from the screen]
	
//Dying ingame and restarting  version 1.0
	-when we drop from the game world we have to make sure camera does not infinitely follow us 
	-so we go to camera2d node and select the limit option and set a fixed limit for it[limit can be calculated using the ruler option in the toolbar] 
	-to make the camera box in place change the offsets coefficients of the box 
	-then set the area the camera then wont follow the player infinitely
	
//creating a kill zone where the player quickly dies and respawns again at the start 
-well create a new scen named killzone 
-then well add area2d and change mask to  2 so that it only interacts wiht layer1 of collsion physics layer of the character
-then well add the node to main node of the game via linking
-then well add collision shape 2d option
-then add a new boundary level node 
-then write a script
extends Area2D


func _on_body_entered(body) :
	print("You died!")
	
		
//then add a timer so the respawn does not start directly but after a small delay 
//add a timer node for that purpose
@onready var timer=$Timer //we can access timer node 
//complete code

extends Area2D
@onready var timer=$Timer //this is to access the timer node directly

func _on_body_entered(body) :
	print("You died!") 
	timer.start() [starts the delay timer after the death of the character]
	
		
func _on_timer_timeout() :
	get_tree().reload_current_scene()  [this is a default timer function signal which means when the timer runs out this will reload the whole scene tree to begin everything from the beginning]
	
step7:adding a bacground
create a new layer called background and move it up 
the first layer is layer 0
then select background layer in the tileset option then paint in the background as desired using the tileset tools

step8:Enemies
create a new scene
and add a simple node2d object then add a sprite2d and select the enemy asset if required 
we can use the already created killzone to make the slime a enemy well select the only required idle animation for now 
link the killzone node and then add collision shape 

to make enemies move well make a script 
Game loop:when a game reads whats hapening and updated
we can change this using process function so that it updates every frame

extends Node2D
@onready var ray_cast_right=$RayCastright
@onready var ray_cast_left=$RayCastrightleft
@onready var animated_sprite=$AnimatedSprite2D
const SPEED=60
var direction=-1
# Called when the node enters the scene tree for the first time.
func _process(delta):
	if ray_cast_right.is_colliding():
		direction=-1
		animated_sprite.flip_h=true
	if ray_cast_left.is_colliding():
		direction=1
		animated_sprite.flip_h=false
	position.x+=direction*SPEED*delta #moving 60 pixel per second
	 #we are updating the x axis every frame
	#delta is the amount of time since the last frame
	#if higher frame rate move little if lower move more 
	# movement x delta 
	
	

-the fliph property is used to flip the sprite faving direction when it collides 	
-we use ray cast to make sure the enemy object can detect anything that it is colliding with ingame 

step9:Dying 2.0
-slow downing when we die
-we need to change the time scale of the entire game for that 
extends Area2D
@onready var timer=$Timer

func _on_body_entered(body) :
	print("You died!")
	Engine.time_scale=0.5 //time scale is used to slow down the whole games speed or engine speed
	timer.start()
	

func _on_timer_timeout() :
	Engine.time_scale=1.0
	get_tree().reload_current_scene()
	
-in teh above when the killzone is activated the whole game engines speed is decreased by 0.5 after the whole scene tree reloads then we can set it back to 1.0 returning the default speed of the game 

//to make it look better go to player 
	body.get_node("CollisionShape2D").queue_free()
	-to make the player fall out of world on death we free the collisionshape body from the world
	-well use physics process function which changes for fixed interval of times useful for objects that interact with their surroundings 
	
-to change keybindings well use actions system
-actions system defines all the action we want to do inside the game 
-example jump movement are actions inside the game 
-go to project then project settings there select the input map 
-create a action then assign it to any key you desire you can bind multiple keys to the same actions too then update ur player movement script using this ur own actions instead
of the default ones provided by the godot compiler 
extends CharacterBody2D


const SPEED = 300.0
const JUMP_VELOCITY = -400.0
@onready var animated_sprite=$AnimatedSprite2D

func _physics_process(delta: float) -> void:
	# Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta

	# Handle jump.
	if Input.is_action_just_pressed("jump") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	#input direction -1,0,1
	var direction := Input.get_axis("move_left", "move_right")
	#we can add direction to our sprite 
	if direction>0:
		animated_sprite.flip_h=false
	elif direction<0:
		animated_sprite.flip_h=true
		
	
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()

step10:adding more player animations
-In the animations add a new animations and add more using the assets
-then type a script to change the animation based on the requirements 

if direction==0:
		animated_sprite.play("playermove") //to make the player sprite play different animation based on the requirements 
	else:
		animated_sprite.play("run")

if is_on_floor()://to check if the character body is on the floor or not to make sure jump animation plays 

step11:Adding text elements to the game 
-Add a node known as label to the game 
-The text will appear blurry due to the zooming out
-So always use a pixelated font for pixel games
-to add new fonts go to the font override option in inspector elements 
-then for increasing the font size start from 8 always use multiple of 8 so that it will not cause any problems to the clarity of the pixelated text 

step12:Score and points system
-first to create a point system we need to make a game manager so well add  our own function incrementation function to the game 
extends Node
var score=0
func add_point():
	score+=1
	print(score)
-We need to make it so that it can be called by the coin function whenever  the call function is executed 
-if theres only one node like the game manager and multiple wont be create right click on it and then make sure its marked as 
unique name 
-then create a score label and drag it unde rgame manager 
-then connect the the nodes using the drag and drop connect label to manager script
-then declare the script 
score_label.text="you collected"+str(score)+"coins."

step12:Adding soundtracks
to add sound tracks you need to add a new node known as musicmplayer2d
-then provide it a music track from the asset 
-audios dont loop automaticallt so click on the audio and enable looping
-then to control the audio sound go tothe audio window
-make new busses there rename them and set the bus to the given audio 
-to stop it from reloading when scene reloads  we use autoloads these r meant to persis throghout the game without any reloading 
-go to project settings and select autoload nad select the music you want 
	
-to add audio for the pickables select them add a audiostream player and add the sound
-as the coin gets directly picked up the sound wont get a opportunity to play so 
-to make timing  fix without writing any code 
-use a node called animation player then click on the animated sprite node
-then go to animation and create a animation called pickup there in visibility in inspector go to next timestamp and make keyframe and disable visibility it makes a  reset animation automatically 
-then do it for collision shape2d 
-making sure the music plays exactly on collision of the coin 
-create animation player create new pickup animation ,go to animated sprite2d create  a invisible key,go to collsion create a disabled key,go to pickup sound create a playing key drag them to first then add track create a function and create a free queue function 
-then go to the code and import the node and add the script
animation_player.play("pickup")
-it will play the sound
step Finale:Export 
-we need a export template
-go to editor and import or download templates 
-go to project and export add platforms windows platform,embed vck,then add pruject name then save the project with export with debug on 

---------------------------------------FINISHED PRODUCT-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

