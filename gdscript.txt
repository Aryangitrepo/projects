Godot script
every godot script code begins with a function 


func _ready():
	print("Hello world")  // this is aready function that is starting the code 
	
// code terminates at new line
//code has identation similar to pytthon
//case sensitive 

Modifying nodes 1.0
func _ready():
	$Label.text="Hello,world" //we are modifying a node called label using .text function 
	$Label.modulate=Color.GREEN //we modulating visual elements of the label node 
	
//taking input
go to project settings -> there select inputmap->add a action -> bind a key to the particular action 

func _input(event): //creating a input capture event function
	if event.is_action_pressed("myaction"): //using is_action_pressed function trying to capture the action or key binding weve setup activatess a event
		$Label.modulate=Color.RED
	if event.is_action_released("myaction"): //assigns another event for another button click 
		$Label.modulate=Color.GREEN
		
		//Variables
		
		var health=100 //initializing  a variable

func _ready():
	health=40    // doing mathematical operations on the variable
	health=20+30
	print(health)
	
	changing the health values on a action
	func _input(event):  //while taking in inputs use the default input function
	if event.is_ation_pressed("myaction"): 
		health-=20
		print(health)
		
		//variables come under certain scopes 
		//game requires a certain type of variable if u give it a different datatype data youll get a error
		//so you use type casting
		//Theres mainly two type of data assignment 
		static
		var number:int=15;  //static (cannot be changed[const] )
		var number:=15//dynamic
		
		const GRAVITY=-1.6 //constant varibales are normally in  capital letters 
		GRAVITY=2 // error
		
		
		//functions
		extends Node
func _input(event):
	if event.is_action_pressed("my_action"):
		jump()   
func jump():
	print("JUMP!")


//inbuilt randf function 
//if we need the player to get a random drop or loot but using rng we use this function
var roll=randf()

//Godot has inbuilt documents available to check inbuilt data about any function you use if u have any doubts

//Arrays
	var items=["Potions","Feather","Stolen hard"] //Array with elements of random datatypes if specific datatypes is required then we can do the other method
	
	extends Node
func _ready():
	var items:Array[string]=["Potions","Feather","Stolen hard"] //in this method we are creating a array of specifically string elements 
	//every element is assigned an index by default
	items[1]="Cook" // changes the string element in that index of the array 
	
	//Loops
	//used to repeat number ofcode n number of times 
	//used for iterations 
	
	//for loop 
	for item in items:
		print(item)
		
	//to run it for a fixed amount of time 
	for n in range 8:
	
	//while loop 
	var glass :=0.0
	while glass<5:
	glass+=1;
	print(glass)
print("Glass is full")

//Dictionaries
//assigning diferent values to some variables 
//assigning values to names in games is performed using this technique
var my_dict={"crook":1,"villain":100}//in this we are assigning level of the different characters 

//dictionaries can be used to store a different data related to a value too 
//similar to json objects in mongodb 
 extends Node
func _ready():
	var players={"crook":{"Level":1,"Health":80}
	,{"villain":{"Level":100,"Health":100}
	}
	print(players["crook"]["Health"])
	
	
//enums are useful for declaring different tags to the variables in the game
//can be used for assigning states to the different objects ingame 
 extends Node
func _ready():
	enum Alignment{ALLY,NEUTRAL,ENEMY}
	
	var unit_alignment=alignment.ALLY
	
	func _ready():
		if unit_alignment==Alignment.ENEMY:
			print("So you chose death ")
		else:
			print("Welcome brotha") 
		

//Match statement 
//match statement is switch equivalent from other languages 
//Executes different code depending on the value of the variable
 extends Node
func _ready():
	match my_alignment :
		Alignment.ALLY:
			print("Hello friend")
		Alignment.Neutral:
			print("What work you got here mate ")
		

//paths
//used to connect different nodes in the godot development environment 
//can be explicitly typed or can drag a node with control to make a path for a particular node 
nready var weapon=get_node("Player/Weapon")

//export keyword
//we can use export keyword to connect to other nodes too 
@export var my_node :Node 
//anything after : is the type we can change in this case based on the requirements
@export var my_node:sprite

//signals 
//used to notify a certain event has occurred 
//if we select a particular object and go to node option well get couple of godots inbuilt signals 

//example:pressed signal 
//we can connect as many functionss to a signal so whenevr the signal condtion
is satisfied it calls all the functions are called
//when a player levels up in a game a player accesses multiple different concepts like 
stats,health,skills etc 
//if a single player node updates all of them it can create problems so we create a signalop
player object emits which will upload all these different nodes automatically
// example program
signal leveled_up(msg)
var xp=0
func _ready():
leveled_up.connect(_on_levelled_up)

func _on_timer_timeout():
	xp+=5
	print(xp)
	if xp>=20:
	xp=0
	leveled_up.emit()
	print("you leveled up")
	
func _on_levelled_up(msg):
	print(msg)
	
	output:you levelled up 
	
//get,set,go
//setting value to a certain range 
set(value):(0,100) //this does not exceed 100

//Classes
//all the built in nodes in godot are classes 
//sprite node means we are instancing the sprite class 
//connecting different nodes can be done using creating objects as instances of the other 
node class 

class_name character 

//if you add some new objects or node the godot compiler automatically extends to that classfrom the current node 

//composition means a single object being composition of multiple different elements on nodes 

//the root nodes are considered as the parent node and the lesses leaf nodes are called 
as the child nodes and can be conneceted to signals to parent node
//a parent can command children but children cannot they can signal for the operation they want 


	





	
	